// Decompiled with JetBrains decompiler
// Type: WhatsApp.Events.Call
// Assembly: WhatsAppCommon, Version=2.18.370.0, Culture=neutral, PublicKeyToken=null
// MVID: 1D438F5E-0D32-4352-9FB4-5035480A3050
// Assembly location: C:\Users\Admin\Desktop\RE\WABeta\WhatsAppCommon.dll


namespace WhatsApp.Events
{
  public class Call : WamEvent
  {
    public wam_enum_call_side? callSide;
    public wam_enum_call_from_ui? callFromUi;
    public wam_enum_xmpp_status? xmppStatus;
    public wam_enum_xmpp_status? peerXmppStatus;
    public string callPeerPlatform;
    public string callId;
    public bool? smallCallButton;
    public long? callSelfIpv4;
    public long? callPeerIpv4;
    public string callSelfIpStr;
    public string callPeerIpStr;
    public string callPeerAppVersion;
    public wam_enum_call_relay_bind_status? callRelayBindStatus;
    public string callRelayServer;
    public long? activeRelayProtocol;
    public long? avgTcpConnCount;
    public long? avgTcpConnLatencyInMsec;
    public long? lastConnErrorStatus;
    public bool? callP2pDisabled;
    public string callTestBucket;
    public long? callUserRate;
    public bool? longConnect;
    public bool? callInterrupted;
    public bool? callEndedInterrupted;
    public bool? callRecordCallbackStopped;
    public bool? callPlaybackCallbackStopped;
    public long? callRecordSilenceRatio;
    public long? numberOfProcessors;
    public long? callRecordFramesPs;
    public double? callRecentRecordFramesPs;
    public long? callSamplingRate;
    public string nativeSamplingRate;
    public string nativeSamplesPerFrame;
    public string deviceHardware;
    public string deviceBoard;
    public bool? builtinAecAvailable;
    public bool? builtinAgcAvailable;
    public bool? builtinNsAvailable;
    public string builtinAecImplementor;
    public string builtinAecUuid;
    public bool? builtinAecEnabled;
    public wam_enum_aec_mode? callAecMode;
    public wam_enum_sw_aec_type? callSwAecType;
    public long? callSwAecMode;
    public long? callAecOffset;
    public long? callAecTailLength;
    public long? callEchoLikelihood;
    public double? callHistEchoLikelihood;
    public double? callEchoEnergy;
    public double? callEchoLikelihoodBeforeEc;
    public long? callTonesDetectedInRingback;
    public long? callTonesDetectedInRecord;
    public long? callCalculatedEcOffset;
    public long? callCalculatedEcOffsetStddev;
    public wam_enum_agc_mode? callAgcMode;
    public wam_enum_ns_mode? callNsMode;
    public wam_enum_audio_engine_type? callAudioEngineType;
    public long? callAndroidAudioMode;
    public long? callAndroidRecordAudioSource;
    public long? callAndroidRecordAudioPreset;
    public long? callRecordBufferSize;
    public long? callPlaybackBufferSize;
    public long? peerUserId;
    public long? callCreatorId;
    public wam_enum_call_result_type? callResult;
    public long? wpNotifyCallFailed;
    public bool? wpSoftwareEcMatches;
    public wam_enum_call_result_type? peerCallResult;
    public bool? callerHungupBeforeConnected;
    public long? callServerNackErrorCode;
    public wam_enum_call_term_reason? callTermReason;
    public bool? callEndReconnecting;
    public bool? isUpnpExternalIpPrivate;
    public bool? isUpnpExternalIpTheSameAsReflexiveIp;
    public long? symmetricNatPortGap;
    public wam_enum_upnp_add_result_code? upnpAddResultCode;
    public wam_enum_upnp_remove_result_code? upnpRemoveResultCode;
    public long? wifiRssiAtCallStart;
    public wam_enum_call_setup_error_type? callSetupErrorType;
    public wam_enum_call_transport_type? callTransport;
    public wam_enum_call_network_medium? callNetwork;
    public wam_enum_call_network_medium? callDefNetwork;
    public wam_enum_peer_call_network_medium? peerCallNetwork;
    public wam_enum_xor_cipher_mode? xorCipher;
    public long? callNetworkSubtype;
    public long? callTransitionCount;
    public long? callTransportRelayToRelayFallbackCount;
    public long? callTransportP2pToRelayFallbackCount;
    public long? encoderCompStepdowns;
    public long? audioPutFrameOverflowPs;
    public long? audioGetFrameUnderflowPs;
    public long? recordCircularBufferFrameCount;
    public long? userRating;
    public string userDescription;
    public long? userProblems;
    public wam_enum_end_call_confirmation_type? presentEndCallConfirmation;
    public wam_enum_end_call_confirmation_type? endCallAfterConfirmation;
    public bool? isIpv6Capable;
    public long? callT;
    public double? callPlaybackFramesPs;
    public double? callRecentPlaybackFramesPs;
    public double? callPlaybackSilenceRatio;
    public double? callAudioRestartCount;
    public double? callAudioRestartReason;
    public double? callRecordMaxEnergyRatio;
    public double? callEcRestartCount;
    public long? callRxStoppedT;
    public long? callSetupT;
    public long? callOfferElapsedT;
    public long? callRingingT;
    public long? callRelayCreateT;
    public long? callMinRtt;
    public long? callMaxRtt;
    public long? callAvgRtt;
    public long? callLastRtt;
    public long? callInitialRtt;
    public double? callTxPktLossPct;
    public double? callTxPktErrorPct;
    public double? callTxAvgBitrate;
    public double? callTxAvgBwe;
    public long? callTxMinJitter;
    public long? callTxMaxJitter;
    public long? callTxAvgJitter;
    public long? callTxMinLossPeriod;
    public long? callTxMaxLossPeriod;
    public long? callTxAvgLossPeriod;
    public double? callRxPktLossPct;
    public double? callRxAvgBitrate;
    public double? callRxAvgBwe;
    public long? callRxMinJitter;
    public long? callRxMaxJitter;
    public long? callRxAvgJitter;
    public long? callRxMinLossPeriod;
    public long? callRxMaxLossPeriod;
    public long? callRxAvgLossPeriod;
    public long? callStartFuncT;
    public long? callEndFuncT;
    public long? callRejectFuncT;
    public long? callAcceptFuncT;
    public long? callSoundPortFuncT;
    public long? callOfferReceiptDelay;
    public long? avgEncodeT;
    public long? avgDecodeT;
    public long? avgPlayCbT;
    public long? avgRecordCbT;
    public long? avgClockCbT;
    public long? avgRecordGetFrameT;
    public long? videoRenderDelayT;
    public double? avgTargetBitrate;
    public double? txTotalBytes;
    public double? rxTotalBytes;
    public double? txTotalBitrate;
    public double? rxTotalBitrate;
    public double? jbLost;
    public double? jbAvgDelay;
    public double? jbMinDelay;
    public double? jbMaxDelay;
    public double? jbLastDelay;
    public double? jbDiscards;
    public double? jbEmpties;
    public double? jbGets;
    public double? jbPuts;
    public double? rcMinrtt;
    public double? rcMaxrtt;
    public long? speakerMinPower;
    public long? speakerMaxPower;
    public long? speakerAvgPower;
    public long? micMinPower;
    public long? micMaxPower;
    public long? micAvgPower;
    public wam_enum_call_wakeup_source? callWakeupSource;
    public double? lowDataUsageBitrate;
    public double? pushToCallOfferDelay;
    public double? callOfferAckTimout;
    public double? pingsSent;
    public double? pongsReceived;
    public double? reflectivePortsDiff;
    public double? callBatteryChangePct;
    public bool? videoEnabled;
    public bool? videoEnabledAtCallStart;
    public long? videoCodecType;
    public long? videoInitialCodecType;
    public long? videoCodecSubType;
    public long? videoCodecScheme;
    public long? videoInitialCodecScheme;
    public long? videoLastCodecType;
    public long? videoTxPackets;
    public long? videoTxResendPackets;
    public long? videoTxRtcpPli;
    public long? videoTxRtcpNack;
    public double? videoTxTotalBytes;
    public double? videoTxBitrate;
    public double? videoTxPktLossPct;
    public double? videoTxPktErrorPct;
    public long? videoRxPackets;
    public long? videoRxRtcpPli;
    public long? videoRxRtcpNack;
    public double? videoRxTotalBytes;
    public double? videoRxBitrate;
    public double? videoRxPktLossPct;
    public double? videoRxPktErrorPct;
    public long? videoDecName;
    public long? videoDecColorId;
    public long? videoDecRestart;
    public double? videoDecAvgFps;
    public long? videoRenderAvgFps;
    public long? videoRenderConverterTs;
    public long? videoDecAvgBitrate;
    public long? videoDecSkipPackets;
    public long? videoDecLostPackets;
    public long? videoDecInputFrames;
    public long? videoDecOutputFrames;
    public long? videoDecErrorFrames;
    public long? videoDecKeyframes;
    public long? videoDecLtrpFrames;
    public long? videoDecCrcMismatchFrames;
    public long? videoCaptureAvgFps;
    public long? videoCaptureConverterTs;
    public long? videoDecLatency;
    public long? videoEncLatency;
    public long? videoEncName;
    public long? videoEncColorId;
    public long? videoEncRestart;
    public double? videoEncAvgTargetFps;
    public long? videoEncAvgBitrate;
    public double? videoEncAvgFps;
    public long? videoEncInputFrames;
    public long? videoEncOutputFrames;
    public long? videoEncErrorFrames;
    public long? videoEncDropFrames;
    public long? videoEncDiscardFrame;
    public long? videoEncKeyframes;
    public long? videoEncLtrpFrames;
    public double? videoTxFecBitrate;
    public long? videoTxFecFrames;
    public double? videoRxFecBitrate;
    public long? videoRxFecFrames;
    public long? videoFecRecovered;
    public double? videoAvgTargetBitrate;
    public double? videoMaxTargetBitrate;
    public double? videoMinTargetBitrate;
    public double? videoLastSenderBwe;
    public double? videoAvgSenderBwe;
    public bool? videoRxBweHitTxBwe;
    public long? videoTargetBitrateReaches200kbpsT;
    public long? videoTargetBitrateReaches500kbpsT;
    public long? videoTargetBitrateReaches1000kbpsT;
    public long? videoCaptureWidth;
    public long? videoCaptureHeight;
    public long? videoWidth;
    public long? videoHeight;
    public long? peerVideoWidth;
    public long? peerVideoHeight;
    public double? avAvgDelta;
    public double? avMaxDelta;
    public wam_enum_radio_type? callRadioType;
    public long? videoDecodePausedCount;
    public long? videoRenderFreezeT;
    public long? videoRenderFreeze2xT;
    public long? videoRenderFreeze4xT;
    public long? videoRenderFreeze8xT;
    public wam_enum_camera_start_mode_params? cameraStartMode;
    public wam_enum_camera_preview_mode? cameraPreviewMode;
    public long? trafficShaperOverflowCount;
    public long? trafficShaperQueueEmptyCount;
    public long? trafficShaperQueuedPacketCount;
    public long? trafficShaperMaxDelayViolations;
    public long? trafficShaperMinDelayViolations;
    public long? trafficShaperAvgQueueMs;
    public long? callOfferDelayT;
    public bool? batteryRulesApplied;
    public bool? batteryLowMatched;
    public bool? batteryDropMatched;
    public double? initialEstimatedTxBitrate;
    public bool? hisInfoCouldBeUsedForInitBwe;
    public long? hisBasedInitialTxBitrate;
    public long? usedInitTxBitrate;
    public wam_enum_init_bwe_source? initBweSource;
    public long? callAvgRottTx;
    public long? callAvgRottRx;
    public double? callAppTrafficTxPct;
    public bool? previousCallVideoEnabled;
    public bool? previousCallWithSamePeer;
    public long? previousCallInterval;
    public bool? callAndrGcmFgEnabled;
    public long? videoActiveTime;
    public long? videoUpgradeRequestCount;
    public long? videoUpgradeCancelCount;
    public long? videoUpgradeCancelByTimeoutCount;
    public long? videoUpgradeRejectCount;
    public long? videoUpgradeRejectByTimeoutCount;
    public long? videoUpgradeCount;
    public long? videoDowngradeCount;
    public long? cameraOffCount;
    public wam_enum_call_video_state? videoSelfState;
    public wam_enum_call_video_state? videoPeerState;
    public long? videoEncTimeOvershoot10PercH264;
    public long? videoEncTimeOvershoot20PercH264;
    public long? videoEncTimeOvershoot40PercH264;
    public long? videoEncTimeOvershoot10PercH265;
    public long? videoEncTimeOvershoot20PercH265;
    public long? videoEncTimeOvershoot40PercH265;
    public long? videoEncTimeOvershoot10PercVp8;
    public long? videoEncTimeOvershoot20PercVp8;
    public long? videoEncTimeOvershoot40PercVp8;
    public long? videoEncTimeOvershoot10PercVp9;
    public long? videoEncTimeOvershoot20PercVp9;
    public long? videoEncTimeOvershoot40PercVp9;
    public long? videoEncTimeUndershoot10PercH264;
    public long? videoEncTimeUndershoot20PercH264;
    public long? videoEncTimeUndershoot40PercH264;
    public long? videoEncTimeUndershoot10PercH265;
    public long? videoEncTimeUndershoot20PercH265;
    public long? videoEncTimeUndershoot40PercH265;
    public long? videoEncTimeUndershoot10PercVp8;
    public long? videoEncTimeUndershoot20PercVp8;
    public long? videoEncTimeUndershoot40PercVp8;
    public long? videoEncTimeUndershoot10PercVp9;
    public long? videoEncTimeUndershoot20PercVp9;
    public long? videoEncTimeUndershoot40PercVp9;
    public long? videoNumH264Frames;
    public long? videoNumH265Frames;
    public long? videoH264Time;
    public long? videoH265Time;
    public long? opusVersion;
    public long? txProbeCountTotal;
    public long? txProbeCountSuccess;
    public long? rxProbeCountTotal;
    public long? rxProbeCountSuccess;
    public double? probeAvgBitrate;
    public double? txTpFbBitrate;
    public double? rxTpFbBitrate;
    public long? c2TxTotalBytes;
    public long? c2RxTotalBytes;
    public long? c2EncFrameCount;
    public long? c2EncAvgT;
    public long? c2EncCpuOveruseCount;
    public long? c2DecFrameCount;
    public long? c2DecFramePlayed;
    public long? c2DecAvgT;
    public long? callTestEvent;
    public long? echoCancellationMsPerSec;
    public long? groupCallSegmentIdx;
    public bool? groupCallIsLastSegment;
    public bool? callIsLastSegment;
    public bool? groupCallIsGroupCallInvitee;
    public long? groupCallTotalCallTSinceCallStart;
    public long? groupCallTotalP3CallTSinceCallStart;
    public long? groupCallInviteCountSinceCallStart;
    public long? groupCallNackCountSinceCallStart;
    public long? numConnectedParticipants;
    public wam_enum_field_stats_row_type? fieldStatsRowType;
    public wam_enum_incoming_call_ui_action_type? incomingCallUiAction;
    public long? callSegmentIdx;
    public wam_enum_call_segment_type? callSegmentType;
    public double? videoAvgCombPsnr;
    public double? videoMinCombPsnr;
    public double? videoMaxCombPsnr;
    public double? videoAvgScalingPsnr;
    public double? videoMinScalingPsnr;
    public double? videoMaxScalingPsnr;
    public double? videoAvgEncodingPsnr;
    public double? videoMinEncodingPsnr;
    public double? videoMaxEncodingPsnr;
    public long? weakWifiSwitchToDefNetTriggeredByPeriodicalCheck;
    public long? weakWifiSwitchToDefNetSuccessByPeriodicalCheck;
    public long? weakWifiSwitchToDefNetTriggered;
    public long? weakWifiSwitchToDefNetSuccess;
    public long? weakWifiSwitchToNonDefNetTriggered;
    public long? weakWifiSwitchToNonDefNetFalsePositive;
    public long? weakWifiSwitchToNonDefNetSuccess;
    public long? callMessagesBufferedCount;

    public void Reset()
    {
      this.callSide = new wam_enum_call_side?();
      this.callFromUi = new wam_enum_call_from_ui?();
      this.xmppStatus = new wam_enum_xmpp_status?();
      this.peerXmppStatus = new wam_enum_xmpp_status?();
      this.callPeerPlatform = (string) null;
      this.callId = (string) null;
      this.smallCallButton = new bool?();
      this.callSelfIpv4 = new long?();
      this.callPeerIpv4 = new long?();
      this.callSelfIpStr = (string) null;
      this.callPeerIpStr = (string) null;
      this.callPeerAppVersion = (string) null;
      this.callRelayBindStatus = new wam_enum_call_relay_bind_status?();
      this.callRelayServer = (string) null;
      this.activeRelayProtocol = new long?();
      this.avgTcpConnCount = new long?();
      this.avgTcpConnLatencyInMsec = new long?();
      this.lastConnErrorStatus = new long?();
      this.callP2pDisabled = new bool?();
      this.callTestBucket = (string) null;
      this.callUserRate = new long?();
      this.longConnect = new bool?();
      this.callInterrupted = new bool?();
      this.callEndedInterrupted = new bool?();
      this.callRecordCallbackStopped = new bool?();
      this.callPlaybackCallbackStopped = new bool?();
      this.callRecordSilenceRatio = new long?();
      this.numberOfProcessors = new long?();
      this.callRecordFramesPs = new long?();
      this.callRecentRecordFramesPs = new double?();
      this.callSamplingRate = new long?();
      this.nativeSamplingRate = (string) null;
      this.nativeSamplesPerFrame = (string) null;
      this.deviceHardware = (string) null;
      this.deviceBoard = (string) null;
      this.builtinAecAvailable = new bool?();
      this.builtinAgcAvailable = new bool?();
      this.builtinNsAvailable = new bool?();
      this.builtinAecImplementor = (string) null;
      this.builtinAecUuid = (string) null;
      this.builtinAecEnabled = new bool?();
      this.callAecMode = new wam_enum_aec_mode?();
      this.callSwAecType = new wam_enum_sw_aec_type?();
      this.callSwAecMode = new long?();
      this.callAecOffset = new long?();
      this.callAecTailLength = new long?();
      this.callEchoLikelihood = new long?();
      this.callHistEchoLikelihood = new double?();
      this.callEchoEnergy = new double?();
      this.callEchoLikelihoodBeforeEc = new double?();
      this.callTonesDetectedInRingback = new long?();
      this.callTonesDetectedInRecord = new long?();
      this.callCalculatedEcOffset = new long?();
      this.callCalculatedEcOffsetStddev = new long?();
      this.callAgcMode = new wam_enum_agc_mode?();
      this.callNsMode = new wam_enum_ns_mode?();
      this.callAudioEngineType = new wam_enum_audio_engine_type?();
      this.callAndroidAudioMode = new long?();
      this.callAndroidRecordAudioSource = new long?();
      this.callAndroidRecordAudioPreset = new long?();
      this.callRecordBufferSize = new long?();
      this.callPlaybackBufferSize = new long?();
      this.peerUserId = new long?();
      this.callCreatorId = new long?();
      this.callResult = new wam_enum_call_result_type?();
      this.wpNotifyCallFailed = new long?();
      this.wpSoftwareEcMatches = new bool?();
      this.peerCallResult = new wam_enum_call_result_type?();
      this.callerHungupBeforeConnected = new bool?();
      this.callServerNackErrorCode = new long?();
      this.callTermReason = new wam_enum_call_term_reason?();
      this.callEndReconnecting = new bool?();
      this.isUpnpExternalIpPrivate = new bool?();
      this.isUpnpExternalIpTheSameAsReflexiveIp = new bool?();
      this.symmetricNatPortGap = new long?();
      this.upnpAddResultCode = new wam_enum_upnp_add_result_code?();
      this.upnpRemoveResultCode = new wam_enum_upnp_remove_result_code?();
      this.wifiRssiAtCallStart = new long?();
      this.callSetupErrorType = new wam_enum_call_setup_error_type?();
      this.callTransport = new wam_enum_call_transport_type?();
      this.callNetwork = new wam_enum_call_network_medium?();
      this.callDefNetwork = new wam_enum_call_network_medium?();
      this.peerCallNetwork = new wam_enum_peer_call_network_medium?();
      this.xorCipher = new wam_enum_xor_cipher_mode?();
      this.callNetworkSubtype = new long?();
      this.callTransitionCount = new long?();
      this.callTransportRelayToRelayFallbackCount = new long?();
      this.callTransportP2pToRelayFallbackCount = new long?();
      this.encoderCompStepdowns = new long?();
      this.audioPutFrameOverflowPs = new long?();
      this.audioGetFrameUnderflowPs = new long?();
      this.recordCircularBufferFrameCount = new long?();
      this.userRating = new long?();
      this.userDescription = (string) null;
      this.userProblems = new long?();
      this.presentEndCallConfirmation = new wam_enum_end_call_confirmation_type?();
      this.endCallAfterConfirmation = new wam_enum_end_call_confirmation_type?();
      this.isIpv6Capable = new bool?();
      this.callT = new long?();
      this.callPlaybackFramesPs = new double?();
      this.callRecentPlaybackFramesPs = new double?();
      this.callPlaybackSilenceRatio = new double?();
      this.callAudioRestartCount = new double?();
      this.callAudioRestartReason = new double?();
      this.callRecordMaxEnergyRatio = new double?();
      this.callEcRestartCount = new double?();
      this.callRxStoppedT = new long?();
      this.callSetupT = new long?();
      this.callOfferElapsedT = new long?();
      this.callRingingT = new long?();
      this.callRelayCreateT = new long?();
      this.callMinRtt = new long?();
      this.callMaxRtt = new long?();
      this.callAvgRtt = new long?();
      this.callLastRtt = new long?();
      this.callInitialRtt = new long?();
      this.callTxPktLossPct = new double?();
      this.callTxPktErrorPct = new double?();
      this.callTxAvgBitrate = new double?();
      this.callTxAvgBwe = new double?();
      this.callTxMinJitter = new long?();
      this.callTxMaxJitter = new long?();
      this.callTxAvgJitter = new long?();
      this.callTxMinLossPeriod = new long?();
      this.callTxMaxLossPeriod = new long?();
      this.callTxAvgLossPeriod = new long?();
      this.callRxPktLossPct = new double?();
      this.callRxAvgBitrate = new double?();
      this.callRxAvgBwe = new double?();
      this.callRxMinJitter = new long?();
      this.callRxMaxJitter = new long?();
      this.callRxAvgJitter = new long?();
      this.callRxMinLossPeriod = new long?();
      this.callRxMaxLossPeriod = new long?();
      this.callRxAvgLossPeriod = new long?();
      this.callStartFuncT = new long?();
      this.callEndFuncT = new long?();
      this.callRejectFuncT = new long?();
      this.callAcceptFuncT = new long?();
      this.callSoundPortFuncT = new long?();
      this.callOfferReceiptDelay = new long?();
      this.avgEncodeT = new long?();
      this.avgDecodeT = new long?();
      this.avgPlayCbT = new long?();
      this.avgRecordCbT = new long?();
      this.avgClockCbT = new long?();
      this.avgRecordGetFrameT = new long?();
      this.videoRenderDelayT = new long?();
      this.avgTargetBitrate = new double?();
      this.txTotalBytes = new double?();
      this.rxTotalBytes = new double?();
      this.txTotalBitrate = new double?();
      this.rxTotalBitrate = new double?();
      this.jbLost = new double?();
      this.jbAvgDelay = new double?();
      this.jbMinDelay = new double?();
      this.jbMaxDelay = new double?();
      this.jbLastDelay = new double?();
      this.jbDiscards = new double?();
      this.jbEmpties = new double?();
      this.jbGets = new double?();
      this.jbPuts = new double?();
      this.rcMinrtt = new double?();
      this.rcMaxrtt = new double?();
      this.speakerMinPower = new long?();
      this.speakerMaxPower = new long?();
      this.speakerAvgPower = new long?();
      this.micMinPower = new long?();
      this.micMaxPower = new long?();
      this.micAvgPower = new long?();
      this.callWakeupSource = new wam_enum_call_wakeup_source?();
      this.lowDataUsageBitrate = new double?();
      this.pushToCallOfferDelay = new double?();
      this.callOfferAckTimout = new double?();
      this.pingsSent = new double?();
      this.pongsReceived = new double?();
      this.reflectivePortsDiff = new double?();
      this.callBatteryChangePct = new double?();
      this.videoEnabled = new bool?();
      this.videoEnabledAtCallStart = new bool?();
      this.videoCodecType = new long?();
      this.videoInitialCodecType = new long?();
      this.videoCodecSubType = new long?();
      this.videoCodecScheme = new long?();
      this.videoInitialCodecScheme = new long?();
      this.videoLastCodecType = new long?();
      this.videoTxPackets = new long?();
      this.videoTxResendPackets = new long?();
      this.videoTxRtcpPli = new long?();
      this.videoTxRtcpNack = new long?();
      this.videoTxTotalBytes = new double?();
      this.videoTxBitrate = new double?();
      this.videoTxPktLossPct = new double?();
      this.videoTxPktErrorPct = new double?();
      this.videoRxPackets = new long?();
      this.videoRxRtcpPli = new long?();
      this.videoRxRtcpNack = new long?();
      this.videoRxTotalBytes = new double?();
      this.videoRxBitrate = new double?();
      this.videoRxPktLossPct = new double?();
      this.videoRxPktErrorPct = new double?();
      this.videoDecName = new long?();
      this.videoDecColorId = new long?();
      this.videoDecRestart = new long?();
      this.videoDecAvgFps = new double?();
      this.videoRenderAvgFps = new long?();
      this.videoRenderConverterTs = new long?();
      this.videoDecAvgBitrate = new long?();
      this.videoDecSkipPackets = new long?();
      this.videoDecLostPackets = new long?();
      this.videoDecInputFrames = new long?();
      this.videoDecOutputFrames = new long?();
      this.videoDecErrorFrames = new long?();
      this.videoDecKeyframes = new long?();
      this.videoDecLtrpFrames = new long?();
      this.videoDecCrcMismatchFrames = new long?();
      this.videoCaptureAvgFps = new long?();
      this.videoCaptureConverterTs = new long?();
      this.videoDecLatency = new long?();
      this.videoEncLatency = new long?();
      this.videoEncName = new long?();
      this.videoEncColorId = new long?();
      this.videoEncRestart = new long?();
      this.videoEncAvgTargetFps = new double?();
      this.videoEncAvgBitrate = new long?();
      this.videoEncAvgFps = new double?();
      this.videoEncInputFrames = new long?();
      this.videoEncOutputFrames = new long?();
      this.videoEncErrorFrames = new long?();
      this.videoEncDropFrames = new long?();
      this.videoEncDiscardFrame = new long?();
      this.videoEncKeyframes = new long?();
      this.videoEncLtrpFrames = new long?();
      this.videoTxFecBitrate = new double?();
      this.videoTxFecFrames = new long?();
      this.videoRxFecBitrate = new double?();
      this.videoRxFecFrames = new long?();
      this.videoFecRecovered = new long?();
      this.videoAvgTargetBitrate = new double?();
      this.videoMaxTargetBitrate = new double?();
      this.videoMinTargetBitrate = new double?();
      this.videoLastSenderBwe = new double?();
      this.videoAvgSenderBwe = new double?();
      this.videoRxBweHitTxBwe = new bool?();
      this.videoTargetBitrateReaches200kbpsT = new long?();
      this.videoTargetBitrateReaches500kbpsT = new long?();
      this.videoTargetBitrateReaches1000kbpsT = new long?();
      this.videoCaptureWidth = new long?();
      this.videoCaptureHeight = new long?();
      this.videoWidth = new long?();
      this.videoHeight = new long?();
      this.peerVideoWidth = new long?();
      this.peerVideoHeight = new long?();
      this.avAvgDelta = new double?();
      this.avMaxDelta = new double?();
      this.callRadioType = new wam_enum_radio_type?();
      this.videoDecodePausedCount = new long?();
      this.videoRenderFreezeT = new long?();
      this.videoRenderFreeze2xT = new long?();
      this.videoRenderFreeze4xT = new long?();
      this.videoRenderFreeze8xT = new long?();
      this.cameraStartMode = new wam_enum_camera_start_mode_params?();
      this.cameraPreviewMode = new wam_enum_camera_preview_mode?();
      this.trafficShaperOverflowCount = new long?();
      this.trafficShaperQueueEmptyCount = new long?();
      this.trafficShaperQueuedPacketCount = new long?();
      this.trafficShaperMaxDelayViolations = new long?();
      this.trafficShaperMinDelayViolations = new long?();
      this.trafficShaperAvgQueueMs = new long?();
      this.callOfferDelayT = new long?();
      this.batteryRulesApplied = new bool?();
      this.batteryLowMatched = new bool?();
      this.batteryDropMatched = new bool?();
      this.initialEstimatedTxBitrate = new double?();
      this.hisInfoCouldBeUsedForInitBwe = new bool?();
      this.hisBasedInitialTxBitrate = new long?();
      this.usedInitTxBitrate = new long?();
      this.initBweSource = new wam_enum_init_bwe_source?();
      this.callAvgRottTx = new long?();
      this.callAvgRottRx = new long?();
      this.callAppTrafficTxPct = new double?();
      this.previousCallVideoEnabled = new bool?();
      this.previousCallWithSamePeer = new bool?();
      this.previousCallInterval = new long?();
      this.callAndrGcmFgEnabled = new bool?();
      this.videoActiveTime = new long?();
      this.videoUpgradeRequestCount = new long?();
      this.videoUpgradeCancelCount = new long?();
      this.videoUpgradeCancelByTimeoutCount = new long?();
      this.videoUpgradeRejectCount = new long?();
      this.videoUpgradeRejectByTimeoutCount = new long?();
      this.videoUpgradeCount = new long?();
      this.videoDowngradeCount = new long?();
      this.cameraOffCount = new long?();
      this.videoSelfState = new wam_enum_call_video_state?();
      this.videoPeerState = new wam_enum_call_video_state?();
      this.videoEncTimeOvershoot10PercH264 = new long?();
      this.videoEncTimeOvershoot20PercH264 = new long?();
      this.videoEncTimeOvershoot40PercH264 = new long?();
      this.videoEncTimeOvershoot10PercH265 = new long?();
      this.videoEncTimeOvershoot20PercH265 = new long?();
      this.videoEncTimeOvershoot40PercH265 = new long?();
      this.videoEncTimeOvershoot10PercVp8 = new long?();
      this.videoEncTimeOvershoot20PercVp8 = new long?();
      this.videoEncTimeOvershoot40PercVp8 = new long?();
      this.videoEncTimeOvershoot10PercVp9 = new long?();
      this.videoEncTimeOvershoot20PercVp9 = new long?();
      this.videoEncTimeOvershoot40PercVp9 = new long?();
      this.videoEncTimeUndershoot10PercH264 = new long?();
      this.videoEncTimeUndershoot20PercH264 = new long?();
      this.videoEncTimeUndershoot40PercH264 = new long?();
      this.videoEncTimeUndershoot10PercH265 = new long?();
      this.videoEncTimeUndershoot20PercH265 = new long?();
      this.videoEncTimeUndershoot40PercH265 = new long?();
      this.videoEncTimeUndershoot10PercVp8 = new long?();
      this.videoEncTimeUndershoot20PercVp8 = new long?();
      this.videoEncTimeUndershoot40PercVp8 = new long?();
      this.videoEncTimeUndershoot10PercVp9 = new long?();
      this.videoEncTimeUndershoot20PercVp9 = new long?();
      this.videoEncTimeUndershoot40PercVp9 = new long?();
      this.videoNumH264Frames = new long?();
      this.videoNumH265Frames = new long?();
      this.videoH264Time = new long?();
      this.videoH265Time = new long?();
      this.opusVersion = new long?();
      this.txProbeCountTotal = new long?();
      this.txProbeCountSuccess = new long?();
      this.rxProbeCountTotal = new long?();
      this.rxProbeCountSuccess = new long?();
      this.probeAvgBitrate = new double?();
      this.txTpFbBitrate = new double?();
      this.rxTpFbBitrate = new double?();
      this.c2TxTotalBytes = new long?();
      this.c2RxTotalBytes = new long?();
      this.c2EncFrameCount = new long?();
      this.c2EncAvgT = new long?();
      this.c2EncCpuOveruseCount = new long?();
      this.c2DecFrameCount = new long?();
      this.c2DecFramePlayed = new long?();
      this.c2DecAvgT = new long?();
      this.callTestEvent = new long?();
      this.echoCancellationMsPerSec = new long?();
      this.groupCallSegmentIdx = new long?();
      this.groupCallIsLastSegment = new bool?();
      this.callIsLastSegment = new bool?();
      this.groupCallIsGroupCallInvitee = new bool?();
      this.groupCallTotalCallTSinceCallStart = new long?();
      this.groupCallTotalP3CallTSinceCallStart = new long?();
      this.groupCallInviteCountSinceCallStart = new long?();
      this.groupCallNackCountSinceCallStart = new long?();
      this.numConnectedParticipants = new long?();
      this.fieldStatsRowType = new wam_enum_field_stats_row_type?();
      this.incomingCallUiAction = new wam_enum_incoming_call_ui_action_type?();
      this.callSegmentIdx = new long?();
      this.callSegmentType = new wam_enum_call_segment_type?();
      this.videoAvgCombPsnr = new double?();
      this.videoMinCombPsnr = new double?();
      this.videoMaxCombPsnr = new double?();
      this.videoAvgScalingPsnr = new double?();
      this.videoMinScalingPsnr = new double?();
      this.videoMaxScalingPsnr = new double?();
      this.videoAvgEncodingPsnr = new double?();
      this.videoMinEncodingPsnr = new double?();
      this.videoMaxEncodingPsnr = new double?();
      this.weakWifiSwitchToDefNetTriggeredByPeriodicalCheck = new long?();
      this.weakWifiSwitchToDefNetSuccessByPeriodicalCheck = new long?();
      this.weakWifiSwitchToDefNetTriggered = new long?();
      this.weakWifiSwitchToDefNetSuccess = new long?();
      this.weakWifiSwitchToNonDefNetTriggered = new long?();
      this.weakWifiSwitchToNonDefNetFalsePositive = new long?();
      this.weakWifiSwitchToNonDefNetSuccess = new long?();
      this.callMessagesBufferedCount = new long?();
    }

    public override uint GetCode() => 462;

    public override void SerializeFields()
    {
      Wam.MaybeSerializeField(1, Wam.EnumToLong<wam_enum_call_side>(this.callSide));
      Wam.MaybeSerializeField(2, Wam.EnumToLong<wam_enum_call_from_ui>(this.callFromUi));
      Wam.MaybeSerializeField(3, Wam.EnumToLong<wam_enum_xmpp_status>(this.xmppStatus));
      Wam.MaybeSerializeField(4, Wam.EnumToLong<wam_enum_xmpp_status>(this.peerXmppStatus));
      Wam.MaybeSerializeField(5, this.callPeerPlatform);
      Wam.MaybeSerializeField(292, this.callId);
      Wam.MaybeSerializeField(6, this.smallCallButton);
      Wam.MaybeSerializeField(7, this.callSelfIpv4);
      Wam.MaybeSerializeField(8, this.callPeerIpv4);
      Wam.MaybeSerializeField(9, this.callSelfIpStr);
      Wam.MaybeSerializeField(10, this.callPeerIpStr);
      Wam.MaybeSerializeField(15, this.callPeerAppVersion);
      Wam.MaybeSerializeField(16, Wam.EnumToLong<wam_enum_call_relay_bind_status>(this.callRelayBindStatus));
      Wam.MaybeSerializeField(17, this.callRelayServer);
      Wam.MaybeSerializeField(412, this.activeRelayProtocol);
      Wam.MaybeSerializeField(413, this.avgTcpConnCount);
      Wam.MaybeSerializeField(414, this.avgTcpConnLatencyInMsec);
      Wam.MaybeSerializeField(415, this.lastConnErrorStatus);
      Wam.MaybeSerializeField(18, this.callP2pDisabled);
      Wam.MaybeSerializeField(19, this.callTestBucket);
      Wam.MaybeSerializeField(20, this.callUserRate);
      Wam.MaybeSerializeField(21, this.longConnect);
      Wam.MaybeSerializeField(22, this.callInterrupted);
      Wam.MaybeSerializeField(23, this.callEndedInterrupted);
      Wam.MaybeSerializeField(24, this.callRecordCallbackStopped);
      Wam.MaybeSerializeField(25, this.callPlaybackCallbackStopped);
      Wam.MaybeSerializeField(26, this.callRecordSilenceRatio);
      Wam.MaybeSerializeField(27, this.numberOfProcessors);
      Wam.MaybeSerializeField(28, this.callRecordFramesPs);
      Wam.MaybeSerializeField(29, this.callRecentRecordFramesPs);
      Wam.MaybeSerializeField(30, this.callSamplingRate);
      Wam.MaybeSerializeField(31, this.nativeSamplingRate);
      Wam.MaybeSerializeField(32, this.nativeSamplesPerFrame);
      Wam.MaybeSerializeField(229, this.deviceHardware);
      Wam.MaybeSerializeField(230, this.deviceBoard);
      Wam.MaybeSerializeField(33, this.builtinAecAvailable);
      Wam.MaybeSerializeField(34, this.builtinAgcAvailable);
      Wam.MaybeSerializeField(35, this.builtinNsAvailable);
      Wam.MaybeSerializeField(36, this.builtinAecImplementor);
      Wam.MaybeSerializeField(37, this.builtinAecUuid);
      Wam.MaybeSerializeField(38, this.builtinAecEnabled);
      Wam.MaybeSerializeField(39, Wam.EnumToLong<wam_enum_aec_mode>(this.callAecMode));
      Wam.MaybeSerializeField(40, Wam.EnumToLong<wam_enum_sw_aec_type>(this.callSwAecType));
      Wam.MaybeSerializeField(41, this.callSwAecMode);
      Wam.MaybeSerializeField(42, this.callAecOffset);
      Wam.MaybeSerializeField(43, this.callAecTailLength);
      Wam.MaybeSerializeField(44, this.callEchoLikelihood);
      Wam.MaybeSerializeField(45, this.callHistEchoLikelihood);
      Wam.MaybeSerializeField(46, this.callEchoEnergy);
      Wam.MaybeSerializeField(47, this.callEchoLikelihoodBeforeEc);
      Wam.MaybeSerializeField(48, this.callTonesDetectedInRingback);
      Wam.MaybeSerializeField(49, this.callTonesDetectedInRecord);
      Wam.MaybeSerializeField(50, this.callCalculatedEcOffset);
      Wam.MaybeSerializeField(51, this.callCalculatedEcOffsetStddev);
      Wam.MaybeSerializeField(52, Wam.EnumToLong<wam_enum_agc_mode>(this.callAgcMode));
      Wam.MaybeSerializeField(53, Wam.EnumToLong<wam_enum_ns_mode>(this.callNsMode));
      Wam.MaybeSerializeField(54, Wam.EnumToLong<wam_enum_audio_engine_type>(this.callAudioEngineType));
      Wam.MaybeSerializeField(55, this.callAndroidAudioMode);
      Wam.MaybeSerializeField(56, this.callAndroidRecordAudioSource);
      Wam.MaybeSerializeField(57, this.callAndroidRecordAudioPreset);
      Wam.MaybeSerializeField(58, this.callRecordBufferSize);
      Wam.MaybeSerializeField(59, this.callPlaybackBufferSize);
      Wam.MaybeSerializeField(60, this.peerUserId);
      Wam.MaybeSerializeField(362, this.callCreatorId);
      Wam.MaybeSerializeField(63, Wam.EnumToLong<wam_enum_call_result_type>(this.callResult));
      Wam.MaybeSerializeField(64, this.wpNotifyCallFailed);
      Wam.MaybeSerializeField(65, this.wpSoftwareEcMatches);
      Wam.MaybeSerializeField(66, Wam.EnumToLong<wam_enum_call_result_type>(this.peerCallResult));
      Wam.MaybeSerializeField(67, this.callerHungupBeforeConnected);
      Wam.MaybeSerializeField(68, this.callServerNackErrorCode);
      Wam.MaybeSerializeField(69, Wam.EnumToLong<wam_enum_call_term_reason>(this.callTermReason));
      Wam.MaybeSerializeField(70, this.callEndReconnecting);
      Wam.MaybeSerializeField(260, this.isUpnpExternalIpPrivate);
      Wam.MaybeSerializeField(261, this.isUpnpExternalIpTheSameAsReflexiveIp);
      Wam.MaybeSerializeField(257, this.symmetricNatPortGap);
      Wam.MaybeSerializeField(246, Wam.EnumToLong<wam_enum_upnp_add_result_code>(this.upnpAddResultCode));
      Wam.MaybeSerializeField(247, Wam.EnumToLong<wam_enum_upnp_remove_result_code>(this.upnpRemoveResultCode));
      Wam.MaybeSerializeField(263, this.wifiRssiAtCallStart);
      Wam.MaybeSerializeField(71, Wam.EnumToLong<wam_enum_call_setup_error_type>(this.callSetupErrorType));
      Wam.MaybeSerializeField(72, Wam.EnumToLong<wam_enum_call_transport_type>(this.callTransport));
      Wam.MaybeSerializeField(76, Wam.EnumToLong<wam_enum_call_network_medium>(this.callNetwork));
      Wam.MaybeSerializeField(405, Wam.EnumToLong<wam_enum_call_network_medium>(this.callDefNetwork));
      Wam.MaybeSerializeField(264, Wam.EnumToLong<wam_enum_peer_call_network_medium>(this.peerCallNetwork));
      Wam.MaybeSerializeField(269, Wam.EnumToLong<wam_enum_xor_cipher_mode>(this.xorCipher));
      Wam.MaybeSerializeField(77, this.callNetworkSubtype);
      Wam.MaybeSerializeField(78, this.callTransitionCount);
      Wam.MaybeSerializeField(79, this.callTransportRelayToRelayFallbackCount);
      Wam.MaybeSerializeField(80, this.callTransportP2pToRelayFallbackCount);
      Wam.MaybeSerializeField(81, this.encoderCompStepdowns);
      Wam.MaybeSerializeField(82, this.audioPutFrameOverflowPs);
      Wam.MaybeSerializeField(83, this.audioGetFrameUnderflowPs);
      Wam.MaybeSerializeField(84, this.recordCircularBufferFrameCount);
      Wam.MaybeSerializeField(86, this.userRating);
      Wam.MaybeSerializeField(87, this.userDescription);
      Wam.MaybeSerializeField(88, this.userProblems);
      Wam.MaybeSerializeField(89, Wam.EnumToLong<wam_enum_end_call_confirmation_type>(this.presentEndCallConfirmation));
      Wam.MaybeSerializeField(90, Wam.EnumToLong<wam_enum_end_call_confirmation_type>(this.endCallAfterConfirmation));
      Wam.MaybeSerializeField(91, this.isIpv6Capable);
      Wam.MaybeSerializeField(92, this.callT);
      Wam.MaybeSerializeField(93, this.callPlaybackFramesPs);
      Wam.MaybeSerializeField(94, this.callRecentPlaybackFramesPs);
      Wam.MaybeSerializeField(95, this.callPlaybackSilenceRatio);
      Wam.MaybeSerializeField(96, this.callAudioRestartCount);
      Wam.MaybeSerializeField(97, this.callAudioRestartReason);
      Wam.MaybeSerializeField(98, this.callRecordMaxEnergyRatio);
      Wam.MaybeSerializeField(99, this.callEcRestartCount);
      Wam.MaybeSerializeField(100, this.callRxStoppedT);
      Wam.MaybeSerializeField(101, this.callSetupT);
      Wam.MaybeSerializeField(102, this.callOfferElapsedT);
      Wam.MaybeSerializeField(103, this.callRingingT);
      Wam.MaybeSerializeField(104, this.callRelayCreateT);
      Wam.MaybeSerializeField(105, this.callMinRtt);
      Wam.MaybeSerializeField(106, this.callMaxRtt);
      Wam.MaybeSerializeField(107, this.callAvgRtt);
      Wam.MaybeSerializeField(108, this.callLastRtt);
      Wam.MaybeSerializeField(109, this.callInitialRtt);
      Wam.MaybeSerializeField(110, this.callTxPktLossPct);
      Wam.MaybeSerializeField(111, this.callTxPktErrorPct);
      Wam.MaybeSerializeField(112, this.callTxAvgBitrate);
      Wam.MaybeSerializeField(113, this.callTxAvgBwe);
      Wam.MaybeSerializeField(114, this.callTxMinJitter);
      Wam.MaybeSerializeField(115, this.callTxMaxJitter);
      Wam.MaybeSerializeField(116, this.callTxAvgJitter);
      Wam.MaybeSerializeField(117, this.callTxMinLossPeriod);
      Wam.MaybeSerializeField(118, this.callTxMaxLossPeriod);
      Wam.MaybeSerializeField(119, this.callTxAvgLossPeriod);
      Wam.MaybeSerializeField(120, this.callRxPktLossPct);
      Wam.MaybeSerializeField(121, this.callRxAvgBitrate);
      Wam.MaybeSerializeField(122, this.callRxAvgBwe);
      Wam.MaybeSerializeField(123, this.callRxMinJitter);
      Wam.MaybeSerializeField(124, this.callRxMaxJitter);
      Wam.MaybeSerializeField(125, this.callRxAvgJitter);
      Wam.MaybeSerializeField(126, this.callRxMinLossPeriod);
      Wam.MaybeSerializeField((int) sbyte.MaxValue, this.callRxMaxLossPeriod);
      Wam.MaybeSerializeField(128, this.callRxAvgLossPeriod);
      Wam.MaybeSerializeField(129, this.callStartFuncT);
      Wam.MaybeSerializeField(130, this.callEndFuncT);
      Wam.MaybeSerializeField(131, this.callRejectFuncT);
      Wam.MaybeSerializeField(132, this.callAcceptFuncT);
      Wam.MaybeSerializeField(133, this.callSoundPortFuncT);
      Wam.MaybeSerializeField(134, this.callOfferReceiptDelay);
      Wam.MaybeSerializeField(135, this.avgEncodeT);
      Wam.MaybeSerializeField(136, this.avgDecodeT);
      Wam.MaybeSerializeField(137, this.avgPlayCbT);
      Wam.MaybeSerializeField(138, this.avgRecordCbT);
      Wam.MaybeSerializeField(139, this.avgClockCbT);
      Wam.MaybeSerializeField(140, this.avgRecordGetFrameT);
      Wam.MaybeSerializeField(196, this.videoRenderDelayT);
      Wam.MaybeSerializeField(141, this.avgTargetBitrate);
      Wam.MaybeSerializeField(142, this.txTotalBytes);
      Wam.MaybeSerializeField(143, this.rxTotalBytes);
      Wam.MaybeSerializeField(144, this.txTotalBitrate);
      Wam.MaybeSerializeField(145, this.rxTotalBitrate);
      Wam.MaybeSerializeField(277, this.jbLost);
      Wam.MaybeSerializeField(146, this.jbAvgDelay);
      Wam.MaybeSerializeField(147, this.jbMinDelay);
      Wam.MaybeSerializeField(148, this.jbMaxDelay);
      Wam.MaybeSerializeField(149, this.jbLastDelay);
      Wam.MaybeSerializeField(150, this.jbDiscards);
      Wam.MaybeSerializeField(151, this.jbEmpties);
      Wam.MaybeSerializeField(152, this.jbGets);
      Wam.MaybeSerializeField(153, this.jbPuts);
      Wam.MaybeSerializeField(154, this.rcMinrtt);
      Wam.MaybeSerializeField(155, this.rcMaxrtt);
      Wam.MaybeSerializeField(248, this.speakerMinPower);
      Wam.MaybeSerializeField(249, this.speakerMaxPower);
      Wam.MaybeSerializeField(250, this.speakerAvgPower);
      Wam.MaybeSerializeField(251, this.micMinPower);
      Wam.MaybeSerializeField(252, this.micMaxPower);
      Wam.MaybeSerializeField(253, this.micAvgPower);
      Wam.MaybeSerializeField(156, Wam.EnumToLong<wam_enum_call_wakeup_source>(this.callWakeupSource));
      Wam.MaybeSerializeField(157, this.lowDataUsageBitrate);
      Wam.MaybeSerializeField(158, this.pushToCallOfferDelay);
      Wam.MaybeSerializeField(159, this.callOfferAckTimout);
      Wam.MaybeSerializeField(160, this.pingsSent);
      Wam.MaybeSerializeField(161, this.pongsReceived);
      Wam.MaybeSerializeField(162, this.reflectivePortsDiff);
      Wam.MaybeSerializeField(195, this.callBatteryChangePct);
      Wam.MaybeSerializeField(163, this.videoEnabled);
      Wam.MaybeSerializeField(270, this.videoEnabledAtCallStart);
      Wam.MaybeSerializeField(236, this.videoCodecType);
      Wam.MaybeSerializeField(321, this.videoInitialCodecType);
      Wam.MaybeSerializeField(303, this.videoCodecSubType);
      Wam.MaybeSerializeField(401, this.videoCodecScheme);
      Wam.MaybeSerializeField(402, this.videoInitialCodecScheme);
      Wam.MaybeSerializeField(404, this.videoLastCodecType);
      Wam.MaybeSerializeField(197, this.videoTxPackets);
      Wam.MaybeSerializeField(198, this.videoTxResendPackets);
      Wam.MaybeSerializeField(199, this.videoTxRtcpPli);
      Wam.MaybeSerializeField(200, this.videoTxRtcpNack);
      Wam.MaybeSerializeField(164, this.videoTxTotalBytes);
      Wam.MaybeSerializeField(165, this.videoTxBitrate);
      Wam.MaybeSerializeField(166, this.videoTxPktLossPct);
      Wam.MaybeSerializeField(167, this.videoTxPktErrorPct);
      Wam.MaybeSerializeField(201, this.videoRxPackets);
      Wam.MaybeSerializeField(202, this.videoRxRtcpPli);
      Wam.MaybeSerializeField(203, this.videoRxRtcpNack);
      Wam.MaybeSerializeField(168, this.videoRxTotalBytes);
      Wam.MaybeSerializeField(169, this.videoRxBitrate);
      Wam.MaybeSerializeField(170, this.videoRxPktLossPct);
      Wam.MaybeSerializeField(171, this.videoRxPktErrorPct);
      Wam.MaybeSerializeField(204, this.videoDecName);
      Wam.MaybeSerializeField(205, this.videoDecColorId);
      Wam.MaybeSerializeField(206, this.videoDecRestart);
      Wam.MaybeSerializeField(207, this.videoDecAvgFps);
      Wam.MaybeSerializeField(208, this.videoRenderAvgFps);
      Wam.MaybeSerializeField(225, this.videoRenderConverterTs);
      Wam.MaybeSerializeField(220, this.videoDecAvgBitrate);
      Wam.MaybeSerializeField(209, this.videoDecSkipPackets);
      Wam.MaybeSerializeField(210, this.videoDecLostPackets);
      Wam.MaybeSerializeField(172, this.videoDecInputFrames);
      Wam.MaybeSerializeField(173, this.videoDecOutputFrames);
      Wam.MaybeSerializeField(174, this.videoDecErrorFrames);
      Wam.MaybeSerializeField(175, this.videoDecKeyframes);
      Wam.MaybeSerializeField(280, this.videoDecLtrpFrames);
      Wam.MaybeSerializeField(419, this.videoDecCrcMismatchFrames);
      Wam.MaybeSerializeField(222, this.videoCaptureAvgFps);
      Wam.MaybeSerializeField(226, this.videoCaptureConverterTs);
      Wam.MaybeSerializeField(223, this.videoDecLatency);
      Wam.MaybeSerializeField(224, this.videoEncLatency);
      Wam.MaybeSerializeField(212, this.videoEncName);
      Wam.MaybeSerializeField(213, this.videoEncColorId);
      Wam.MaybeSerializeField(214, this.videoEncRestart);
      Wam.MaybeSerializeField(215, this.videoEncAvgTargetFps);
      Wam.MaybeSerializeField(221, this.videoEncAvgBitrate);
      Wam.MaybeSerializeField(216, this.videoEncAvgFps);
      Wam.MaybeSerializeField(176, this.videoEncInputFrames);
      Wam.MaybeSerializeField(177, this.videoEncOutputFrames);
      Wam.MaybeSerializeField(178, this.videoEncErrorFrames);
      Wam.MaybeSerializeField(179, this.videoEncDropFrames);
      Wam.MaybeSerializeField(217, this.videoEncDiscardFrame);
      Wam.MaybeSerializeField(180, this.videoEncKeyframes);
      Wam.MaybeSerializeField(281, this.videoEncLtrpFrames);
      Wam.MaybeSerializeField(218, this.videoTxFecBitrate);
      Wam.MaybeSerializeField(181, this.videoTxFecFrames);
      Wam.MaybeSerializeField(219, this.videoRxFecBitrate);
      Wam.MaybeSerializeField(182, this.videoRxFecFrames);
      Wam.MaybeSerializeField(183, this.videoFecRecovered);
      Wam.MaybeSerializeField(184, this.videoAvgTargetBitrate);
      Wam.MaybeSerializeField(420, this.videoMaxTargetBitrate);
      Wam.MaybeSerializeField(421, this.videoMinTargetBitrate);
      Wam.MaybeSerializeField(185, this.videoLastSenderBwe);
      Wam.MaybeSerializeField(186, this.videoAvgSenderBwe);
      Wam.MaybeSerializeField(187, this.videoRxBweHitTxBwe);
      Wam.MaybeSerializeField(349, this.videoTargetBitrateReaches200kbpsT);
      Wam.MaybeSerializeField(350, this.videoTargetBitrateReaches500kbpsT);
      Wam.MaybeSerializeField(351, this.videoTargetBitrateReaches1000kbpsT);
      Wam.MaybeSerializeField(227, this.videoCaptureWidth);
      Wam.MaybeSerializeField(228, this.videoCaptureHeight);
      Wam.MaybeSerializeField(188, this.videoWidth);
      Wam.MaybeSerializeField(189, this.videoHeight);
      Wam.MaybeSerializeField(190, this.peerVideoWidth);
      Wam.MaybeSerializeField(191, this.peerVideoHeight);
      Wam.MaybeSerializeField(192, this.avAvgDelta);
      Wam.MaybeSerializeField(193, this.avMaxDelta);
      Wam.MaybeSerializeField(231, Wam.EnumToLong<wam_enum_radio_type>(this.callRadioType));
      Wam.MaybeSerializeField(232, this.videoDecodePausedCount);
      Wam.MaybeSerializeField(235, this.videoRenderFreezeT);
      Wam.MaybeSerializeField(304, this.videoRenderFreeze2xT);
      Wam.MaybeSerializeField(305, this.videoRenderFreeze4xT);
      Wam.MaybeSerializeField(306, this.videoRenderFreeze8xT);
      Wam.MaybeSerializeField(233, Wam.EnumToLong<wam_enum_camera_start_mode_params>(this.cameraStartMode));
      Wam.MaybeSerializeField(322, Wam.EnumToLong<wam_enum_camera_preview_mode>(this.cameraPreviewMode));
      Wam.MaybeSerializeField(237, this.trafficShaperOverflowCount);
      Wam.MaybeSerializeField(238, this.trafficShaperQueueEmptyCount);
      Wam.MaybeSerializeField(239, this.trafficShaperQueuedPacketCount);
      Wam.MaybeSerializeField(240, this.trafficShaperMaxDelayViolations);
      Wam.MaybeSerializeField(241, this.trafficShaperMinDelayViolations);
      Wam.MaybeSerializeField(242, this.trafficShaperAvgQueueMs);
      Wam.MaybeSerializeField(243, this.callOfferDelayT);
      Wam.MaybeSerializeField(353, this.batteryRulesApplied);
      Wam.MaybeSerializeField(354, this.batteryLowMatched);
      Wam.MaybeSerializeField(355, this.batteryDropMatched);
      Wam.MaybeSerializeField(244, this.initialEstimatedTxBitrate);
      Wam.MaybeSerializeField(339, this.hisInfoCouldBeUsedForInitBwe);
      Wam.MaybeSerializeField(342, this.hisBasedInitialTxBitrate);
      Wam.MaybeSerializeField(341, this.usedInitTxBitrate);
      Wam.MaybeSerializeField(337, Wam.EnumToLong<wam_enum_init_bwe_source>(this.initBweSource));
      Wam.MaybeSerializeField(258, this.callAvgRottTx);
      Wam.MaybeSerializeField(259, this.callAvgRottRx);
      Wam.MaybeSerializeField(262, this.callAppTrafficTxPct);
      Wam.MaybeSerializeField(265, this.previousCallVideoEnabled);
      Wam.MaybeSerializeField(267, this.previousCallWithSamePeer);
      Wam.MaybeSerializeField(266, this.previousCallInterval);
      Wam.MaybeSerializeField(268, this.callAndrGcmFgEnabled);
      Wam.MaybeSerializeField(276, this.videoActiveTime);
      Wam.MaybeSerializeField(271, this.videoUpgradeRequestCount);
      Wam.MaybeSerializeField(323, this.videoUpgradeCancelCount);
      Wam.MaybeSerializeField(325, this.videoUpgradeCancelByTimeoutCount);
      Wam.MaybeSerializeField(324, this.videoUpgradeRejectCount);
      Wam.MaybeSerializeField(326, this.videoUpgradeRejectByTimeoutCount);
      Wam.MaybeSerializeField(272, this.videoUpgradeCount);
      Wam.MaybeSerializeField(273, this.videoDowngradeCount);
      Wam.MaybeSerializeField(331, this.cameraOffCount);
      Wam.MaybeSerializeField(274, Wam.EnumToLong<wam_enum_call_video_state>(this.videoSelfState));
      Wam.MaybeSerializeField(275, Wam.EnumToLong<wam_enum_call_video_state>(this.videoPeerState));
      Wam.MaybeSerializeField(363, this.videoEncTimeOvershoot10PercH264);
      Wam.MaybeSerializeField(364, this.videoEncTimeOvershoot20PercH264);
      Wam.MaybeSerializeField(365, this.videoEncTimeOvershoot40PercH264);
      Wam.MaybeSerializeField(366, this.videoEncTimeOvershoot10PercH265);
      Wam.MaybeSerializeField(367, this.videoEncTimeOvershoot20PercH265);
      Wam.MaybeSerializeField(368, this.videoEncTimeOvershoot40PercH265);
      Wam.MaybeSerializeField(369, this.videoEncTimeOvershoot10PercVp8);
      Wam.MaybeSerializeField(370, this.videoEncTimeOvershoot20PercVp8);
      Wam.MaybeSerializeField(371, this.videoEncTimeOvershoot40PercVp8);
      Wam.MaybeSerializeField(372, this.videoEncTimeOvershoot10PercVp9);
      Wam.MaybeSerializeField(373, this.videoEncTimeOvershoot20PercVp9);
      Wam.MaybeSerializeField(374, this.videoEncTimeOvershoot40PercVp9);
      Wam.MaybeSerializeField(375, this.videoEncTimeUndershoot10PercH264);
      Wam.MaybeSerializeField(376, this.videoEncTimeUndershoot20PercH264);
      Wam.MaybeSerializeField(377, this.videoEncTimeUndershoot40PercH264);
      Wam.MaybeSerializeField(378, this.videoEncTimeUndershoot10PercH265);
      Wam.MaybeSerializeField(379, this.videoEncTimeUndershoot20PercH265);
      Wam.MaybeSerializeField(380, this.videoEncTimeUndershoot40PercH265);
      Wam.MaybeSerializeField(381, this.videoEncTimeUndershoot10PercVp8);
      Wam.MaybeSerializeField(382, this.videoEncTimeUndershoot20PercVp8);
      Wam.MaybeSerializeField(383, this.videoEncTimeUndershoot40PercVp8);
      Wam.MaybeSerializeField(384, this.videoEncTimeUndershoot10PercVp9);
      Wam.MaybeSerializeField(385, this.videoEncTimeUndershoot20PercVp9);
      Wam.MaybeSerializeField(386, this.videoEncTimeUndershoot40PercVp9);
      Wam.MaybeSerializeField(332, this.videoNumH264Frames);
      Wam.MaybeSerializeField(333, this.videoNumH265Frames);
      Wam.MaybeSerializeField(334, this.videoH264Time);
      Wam.MaybeSerializeField(335, this.videoH265Time);
      Wam.MaybeSerializeField(287, this.opusVersion);
      Wam.MaybeSerializeField(288, this.txProbeCountTotal);
      Wam.MaybeSerializeField(289, this.txProbeCountSuccess);
      Wam.MaybeSerializeField(290, this.rxProbeCountTotal);
      Wam.MaybeSerializeField(291, this.rxProbeCountSuccess);
      Wam.MaybeSerializeField(327, this.probeAvgBitrate);
      Wam.MaybeSerializeField(293, this.txTpFbBitrate);
      Wam.MaybeSerializeField(294, this.rxTpFbBitrate);
      Wam.MaybeSerializeField(295, this.c2TxTotalBytes);
      Wam.MaybeSerializeField(296, this.c2RxTotalBytes);
      Wam.MaybeSerializeField(297, this.c2EncFrameCount);
      Wam.MaybeSerializeField(298, this.c2EncAvgT);
      Wam.MaybeSerializeField(299, this.c2EncCpuOveruseCount);
      Wam.MaybeSerializeField(300, this.c2DecFrameCount);
      Wam.MaybeSerializeField(301, this.c2DecFramePlayed);
      Wam.MaybeSerializeField(302, this.c2DecAvgT);
      Wam.MaybeSerializeField(318, this.callTestEvent);
      Wam.MaybeSerializeField(320, this.echoCancellationMsPerSec);
      Wam.MaybeSerializeField(329, this.groupCallSegmentIdx);
      Wam.MaybeSerializeField(356, this.groupCallIsLastSegment);
      Wam.MaybeSerializeField(388, this.callIsLastSegment);
      Wam.MaybeSerializeField(357, this.groupCallIsGroupCallInvitee);
      Wam.MaybeSerializeField(358, this.groupCallTotalCallTSinceCallStart);
      Wam.MaybeSerializeField(359, this.groupCallTotalP3CallTSinceCallStart);
      Wam.MaybeSerializeField(360, this.groupCallInviteCountSinceCallStart);
      Wam.MaybeSerializeField(361, this.groupCallNackCountSinceCallStart);
      Wam.MaybeSerializeField(330, this.numConnectedParticipants);
      Wam.MaybeSerializeField(328, Wam.EnumToLong<wam_enum_field_stats_row_type>(this.fieldStatsRowType));
      Wam.MaybeSerializeField(387, Wam.EnumToLong<wam_enum_incoming_call_ui_action_type>(this.incomingCallUiAction));
      Wam.MaybeSerializeField(389, this.callSegmentIdx);
      Wam.MaybeSerializeField(393, Wam.EnumToLong<wam_enum_call_segment_type>(this.callSegmentType));
      Wam.MaybeSerializeField(390, this.videoAvgCombPsnr);
      Wam.MaybeSerializeField(391, this.videoMinCombPsnr);
      Wam.MaybeSerializeField(392, this.videoMaxCombPsnr);
      Wam.MaybeSerializeField(408, this.videoAvgScalingPsnr);
      Wam.MaybeSerializeField(406, this.videoMinScalingPsnr);
      Wam.MaybeSerializeField(409, this.videoMaxScalingPsnr);
      Wam.MaybeSerializeField(410, this.videoAvgEncodingPsnr);
      Wam.MaybeSerializeField(407, this.videoMinEncodingPsnr);
      Wam.MaybeSerializeField(411, this.videoMaxEncodingPsnr);
      Wam.MaybeSerializeField(394, this.weakWifiSwitchToDefNetTriggeredByPeriodicalCheck);
      Wam.MaybeSerializeField(395, this.weakWifiSwitchToDefNetSuccessByPeriodicalCheck);
      Wam.MaybeSerializeField(396, this.weakWifiSwitchToDefNetTriggered);
      Wam.MaybeSerializeField(397, this.weakWifiSwitchToDefNetSuccess);
      Wam.MaybeSerializeField(398, this.weakWifiSwitchToNonDefNetTriggered);
      Wam.MaybeSerializeField(399, this.weakWifiSwitchToNonDefNetFalsePositive);
      Wam.MaybeSerializeField(400, this.weakWifiSwitchToNonDefNetSuccess);
      Wam.MaybeSerializeField(422, this.callMessagesBufferedCount);
    }
  }
}
